// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import com.lloseng.ocsf.client.ObservableClient;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract superclass * in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer {	// Instance variables **********************************************	/**	 * The interface type variable. It allows the implementation of the display	 * method in the client.	 */	ChatIF clientUI;	String id;	ObservableClient clientCommunication;		// Constructors ****************************************************	/**	 * Constructs an instance of the chat client.	 *	 * @param host     The server to connect to.	 * @param port     The port number to connect on.	 * @param clientUI The interface type variable.	 */	public ChatClient(String host, int port, String id, ChatIF clientUI) throws IOException {		clientCommunication = new ObservableClient(host, port);		clientCommunication.addObserver(this);		this.clientUI = clientUI;		this.id = id;		clientCommunication.openConnection();}	// Instance methods ************************************************	/**	 * This method handles all data that comes in from the server.	 *	 * @param msg The message from the server.	 */	public void handleMessageFromServer(Object msg) {		if (isACommand(msg.toString())) {			handleCommandFromServer(msg.toString().substring(1));		} else {			clientUI.display(msg.toString());		}	}	/**	 * This method handles all data coming from the UI	 *	 * @param message The message from the UI.	 */	public void handleMessageFromClientUI(String message) {		if (isACommand(message)) {			// Deletes the "#" from the string before handling it			handleCommand(message.substring(1));		} else {			try {				clientCommunication.sendToServer(message);			} catch (IOException e) {				clientUI.display("Could not send message to server (not connected)");				logoff();			}		}	}	/**	 * This method terminates the client.	 */	public void quit() {		try {			clientCommunication.closeConnection();		} catch (IOException e) {		}		System.exit(0);	}	protected void connectionClosed() {		clientUI.display("Connection closed");	}	protected void connectionException(Exception exception) {		clientUI.display("Server stopped");		logoff();	}	protected void connectionEstablished() {		clientUI.display("Connection Established");		try {			clientCommunication.sendToServer("#login " + this.id);		} catch (IOException e) {			clientUI.display("Could not send message to server (not connected)");			logoff();		}	}	// Commands methods ************************************************	/**	 * Returns true if the msg is a command	 * 	 * @param msg	 * @return	 */	public boolean isACommand(String msg) {		return msg.charAt(0) == '#';	}	/**	 * Handle the commands	 * 	 * @param cmd The command string without "#"	 */	public void handleCommand(String cmd) {		String[] s = cmd.split(" ");		if (s[0].equals("quit")) {			quit();		} else if (s[0].equals("logoff")) {			logoff();		} else if (s[0].equals("sethost")) {			clientCommunication.setHost(s[1]);		} else if (s[0].equals("setport")) {			try {				clientCommunication.setPort(Integer.parseInt(s[1]));			} catch (NumberFormatException e) {				this.clientUI.display("Not an integer !");			}		} else if (s[0].equals("login")) {						login();		} else if (s[0].equals("gethost")) {			clientUI.display(clientCommunication.getHost());					} else if (s[0].equals("getport")) {			clientUI.display(Integer.valueOf(clientCommunication.getPort()).toString());		} else {			clientUI.display("This command doesn't exists");		}	}		public void handleCommandFromServer(String cmd) {		String[] s = cmd.split(" ");		if (s[0].equals("logoff")) {			try {				clientCommunication.closeConnection();			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}	}	/**	 * Log the client in and display a message if it is already connected	 */	public void login() {		if (clientCommunication.isConnected()) {			clientUI.display("You are already logged in");		} else {			try {				clientCommunication.openConnection();			} catch (IOException e) {				clientUI.display("Could not connect to server : the host or port may be invalid");			}		}	}	/**	 * Log the client out and display a message if it is already disconnected	 */	public void logoff()  {		if (!clientCommunication.isConnected()) {			clientUI.display("You are already logged off");		} else {			try {				clientCommunication.sendToServer("#logoff");				clientCommunication.closeConnection();			} catch (IOException e) {			}		}	}	@Override	public void update(Observable o, Object arg) {		// TODO Auto-generated method stub		if (arg instanceof String) {			if (arg.equals(clientCommunication.CONNECTION_CLOSED)){				connectionClosed();			}			else if (arg.equals(clientCommunication.CONNECTION_ESTABLISHED)){				connectionEstablished();			}			else{				handleMessageFromServer(arg);			}		}		else if (arg instanceof Exception) {			connectionException((Exception)arg);		}	}}//End of ChatClient class