package server;// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.*;import common.ChatIF;import ocsf.server.*;/** * This class overrides some of the methods in the abstract superclass in order * to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @author Fran&ccedil;ois B&eacute;langer * @author Paul Holden * @version July 2000 */public class EchoServer extends AbstractServer {	// Instance variables **********************************************	/**	 * The interface type variable. It allows the implementation of the display	 * method in the server.	 */	ChatIF serverUI;	boolean serverclosed;	// Constructors ****************************************************		/**	 * Constructs an instance of the echo server.	 *	 * @param port The port number to connect on.	 */	public EchoServer(int port, ChatIF serverUI) {		super(port);		this.serverUI = serverUI;	}	// Instance methods ************************************************	/**	 * This method handles any messages received from the client.	 *	 * @param msg    The message received from the client.	 * @param client The connection from which the message originated.	 */	public void handleMessageFromClient(Object msg, ConnectionToClient client) {		if (isACommand(msg.toString())) {			handleCommandFromClient(msg.toString().substring(1), client);		} else {			System.out.println("Message received: " + msg + " from " + client);			this.sendToAllClients(msg);		}	}		public boolean isServerclosed() {		return serverclosed;	}	public void setServerclosed(boolean severclosed) {		this.serverclosed = severclosed;	}	/**	 * This method overrides the one in the superclass. Called when the server	 * starts listening for connections.	 */	protected void serverStarted() {		serverUI.display("Server listening for connections on port " + getPort());	}	/**	 * This method overrides the one in the superclass. Called when the server stops	 * listening for connections.	 */	protected void serverStopped() {		serverUI.display("Server has stopped listening for connections.");	}	protected void clientConnected(ConnectionToClient client) {		serverUI.display("Client connected, adress : " + client.getInetAddress());	}	synchronized protected void clientDisconnected(ConnectionToClient client) {		serverUI.display("Client disconnected, adress : " + client.getInetAddress());	}	public void handleMessageFromServerUI(String message) {		if (isACommand(message)) {			handleCommand(message.substring(1));		} else {			this.sendToAllClients("Server MSG> " + message);		}	}		public void handleCommand(String cmd) {		String[] s = cmd.split(" ");				if (s[0].equals("quit")) {			quit();		} else if (s[0].equals("stop")) {			stopListening();		}		else if (s[0].equals("close")) {			closeServer();		}		else if (s[0].equals("setport")) {			if (!isServerclosed()) {				this.serverUI.display("can't change port, server running");			}			else {				this.setPort(Integer.parseInt(s[1]));				}		}		else if (s[0].equals("start")) {			if (!isServerclosed()) {				this.serverUI.display("server already running");			}			else {				try {					listen();				} catch (IOException e) {				}			}		}		// TODO Getport								}		public void closeServer() {		try {			close();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		setServerclosed(true);	}		public void quit() {		closeServer();		System.exit(0);	}	/**	 * Handle the commands received from the client	 * 	 * @param cmd    The command string without "#"	 * @param client The client which has sent the command	 */	public void handleCommandFromClient(String cmd, ConnectionToClient client) {		String[] s = cmd.split(" ");		if (s[0].equals("logoff")) {			try {				client.close();			} catch (IOException e) {			}		}	}	/**	 * @param msg	 * @return true if the msg is a command (starting with "#")	 */	public boolean isACommand(String msg) {		return msg.charAt(0) == '#';	}}//End of EchoServer class